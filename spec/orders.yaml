openapi: 3.0.3
info:
  title: YumYumNow Order Microservice
  description: This is the microservice responsible for managing all the orders in YumYumNow system.
  version: 1.0.0
servers:
  - url: 'http://localhost:8082/'
paths:
  /order/:
    post:
      tags:
        - order
      summary: Create a new order
      description: This will create a new order, only customers are allowed to create new orders. The order will be created with an empty dish list, the corresponding user and vendor id, and the customers home location.
      parameters:
        - name: userID
          in: header
          description: The id of the user
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
        - name: vendorID
          in: query
          description: The id of the vendor
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
      responses:
        '201':
          description: Order created successfully, the location is the customers home address. Returns the created order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid or missing userID/vendorID.
        '403':
          description: The user is not a customer
    get:
      tags:
        - order
      summary: Retrieve all relevant orders
      description: If the user is a customer this will retrieve all past orders of this customer (including ones not paid for yet), if the user is a vendor this will return all its past orders and ongoing, if the user is a courier user this will return all their ongoing and past orders, if the user is a admin this will retrieve **all** orders in the system.
      parameters:
        - name: userID
          in: header
          description: The id of the user
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
      responses:
        '200':
          description: In case the user exists this returns the list of orders as explained in the description.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Invalid or missing userID
    put:
      tags:
        - order
      summary: Update an existing order
      description: Customers can only update the order's location and only for orders which are still unpaid for. Vendors and couriers can update the order's status and change the courier ID and fee. The courier can also change the courier rating of a order.  An admin can update all fields of the order object. The id of the order to modify is based on the id field of the order.
      parameters:
        - name: userID
          in: header
          description: The id of the user
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '204':
          description: Order updated successfully, returns the updated order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid/missing userID or order object
        '403':
          description: Cannot update an order that is not yours or fields other than location (admin access is required).

  /order/{orderID}/:
    get:
      tags:
        - order
      parameters:
        - name: orderID
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
      summary: Retrieve an order based on its ID
      description: This will retrieve an order from the system based on its ID.
      responses:
        '200':
          description: Succeeds in case the order exists.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Invalid or missing orderID
    delete:
      tags:
        - order
      summary: Delete a order
      description: This will delete an order from the system, customers are only allowed to delete orders that are theirs and haven't been paid for. Admins can delte any order.
      parameters:
        - name: userID
          in: header
          description: The id of the user
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
        - name: orderID
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
          description: The id of the order to delete
      responses:
        '200':
          description: Order successfully deleted
        '400':
          description: Invalid user or order id
        '403':
          description: Cannot delete an order that is not yours and/or already paid for as a customer. Admins can delete any orders

  /order/{orderID}/dishes/:
    put:
      tags:
        - order
      summary: Overwrite the dish list with the received list and return the total price
      description: This will overwrite the current dish list of an order with a new dish list and quantities. Only a customer can modify this and only for an order which is unpaid yet.
      parameters:
        - name: userID
          in: header
          description: The id of the user
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
        - name: orderID
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
          description: The id of the order to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                dishes:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                      quantity:
                        type: integer
                        minimum: 1
      responses:
        '200':
          description: Dishes successfully updated, this returns the new price for the order
          content:
            application/json:
              schema:
                type: object
                properties:
                  price:
                    type: number
                    format: float
        '400':
          description: The dish list might be invalid or contain an invalid item.
        '403':
          description: Not a customer or order already paid for.
        '404':
          description: Order not found

    # delete goes here

  /order/{orderID}/pay/:
    post:
      tags:
        - order
      summary: Pay for a order
      description: This endpoint pays for an order and sends it to a vendor/courier. The confirmation token is verified with the external Payment service. Only a customer may pay for an order and only for an unpaid order. An admin may pay for any order and any token from an admin is accepted as confirmation (but a valid json object is still required). The location in range check is performed after calling this endpoint.
      parameters:
        - name: userID
          in: header
          description: The id of the user
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
        - name: orderID
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
          description: The id of the order to pay for
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentConfirmation:
                  type: string
                  example: "AAAZWUdyoNCMpam1v2C2nqja3lXLwV4"
                  description: The payment confirmation token.
      responses:
        '200':
          description: Payment success, order status updated from `unpaid` to `pending`
        '400':
          description: Invalid user or order id, or this order has already been paid for or the vendor does not deliver to this address
        '403':
          description: Invalid payment confirmation or user is not the owner of this order

  /order/{orderID}/reorder/:
    post:
      tags:
        - order
      summary: Reorder a past order
      description: This takes a past order and creates a new one based on it with the unpaid status, this will fail in case any of the dishes in the past order are not available anymore or the vendor does not exist anymore or the vendor does not deliver to that address anymore. Much alike creating a new order the delivery location can be changed by the PUT order endpoint.
      parameters:
        - name: userID
          in: header
          description: The id of the user
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
        - name: orderID
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
          description: The id of the order to reorder
      responses:
        '200':
          description: Order successfully reordered, returns the newly created order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid/missing user id or missing/invalid order id
        '404':
          description: Some of the items in this order are not being offered anymore, therefore reordering is impossible

  /order/{orderID}/rate/:
    post:
      tags:
        - order
      summary: Rate a past order
      description: This adds a rating to an order can only be performed by a customer which created the order if the order status is delivered. An admin can change the rating or any order.
      parameters:
        - name: userID
          in: header
          description: The id of the user
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
        - name: orderID
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
          description: The id of the order to rate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 10
                  description: Rating for the order (scale of 1-10)
      responses:
        '200':
          description: Order successfully rated
        '400':
          description: Invalid rating value or user id or missing/invalid order id
        '403':
          description: If trying to change a rating not as a customer or admin or of not own order (in case of customer)

  /vendor/radius/:
    post:
      tags:
        - vendor
      summary: Get the vendors that are close to a location.
      description: This will return all vendors which can deliver to the given location based upon the vendors delivery radius and the global radius. You can also filter for a specific restaurant, the algorithm used for searching is fuzzy finding. If no location is provided the users home address will be used.
      parameters:
        - name: userID
          in: header
          description: The id of the user
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
        - name: search
          in: query
          description: The name of the restaurant to filter for
          required: false
          schema:
            type: string
            example: Shabu Shabu
      requestBody:
        description: The location of the user
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        '200':
          description: Successful operation, returns list of vendors ids
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IdType'
        '400':
          description: Invalid/missing location
  /vendor/dish/:
    post:
      tags:
        - vendor
      summary: Add a new dish to the vendor.
      description: This will add a new dish to the vendors offerings, will ignore the id of the object in the request body and return the assigned id in the response.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dish'
      responses:
        '200':
          description: Dish added, returns the newly created dish object
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dish'
        '400':
          description: Invalid dish object
        '401':
          description: Happens if not done by a vendor, or by different vendor than mentioned in the object.
    put:
      tags:
        - vendor
      summary: Update a dish on the menu
      description: Updates a dish object based on the vendor id and dish id of the outdated dish.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dish'
      responses:
        '200':
          description: Dish successfully updated
        '400':
          description: Missing/invalid dish
        '404':
          description: Dish not found

  /vendor/dish/{vendorID}/:
    get:
      tags:
        - vendor
      summary: Get all dishes from the vendor whose id was given to the method
      description: This endpoint will omit dishes to which the user is allergic to. If no `userID` is provided, will return all dishes of that vendor.
      parameters:
        - name: userID
          in: header
          required: false
          schema:
            $ref: '#/components/schemas/IdType'
        - name: vendorID
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
      responses:
        '200':
          description: Dishes retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dish'
        '400':
          description: Invalid/missing vendor id

  /vendor/dish/{dishID}/:
    delete:
      tags:
        - vendor
      summary: Delete a dish
      parameters:
        - name: userID
          in: header
          description: The id of the vendor
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
        - name: dishID
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
          description: The id of the dish to delete
      responses:
        '200':
          description: Dish successfully deleted from the menu.
        '400':
          description: Invalid vendor or dish id.
        '403':
          description: Cannot delete a dish that is not yours. Or you are not a vendor.

  /vendor/analytics/:
    get:
      tags:
        - vendor
      summary: Returns analytics for the vendor
      parameters:
        - name: userID
          in: header
          description: The id of the vendor
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
      responses:
        '200':
          description: If the vendor is pulling their analytics they get their information about order volumes per day, popular items, peak ordering hours, and customer preferences.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Analytic'
        '400':
          description: Invalid or missing vendorID. Or the ID signifies another user who is not a vendor.
  /vendor/{customerID}/past/:
    get:
      tags:
        - vendor
      summary: Returns past orders of a customer
      description: Returns past orders of a customer with the specified id.
      parameters:
        - name: userID
          in: header
          description: The id of the user
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
        - name: customerID
          in: path
          description: The id of the customer
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
      responses:
        '200':
          description: Returns past orders of a customer with the specified id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: User id is not a valid vendorID or customerID is not a valid customerID
  /dish/{dishID}:
    get:
      tags:
        - dish
      summary: Returns a dish based on its id
      description: Returns a dish with the specified id.
      parameters:
        - name: dishID
          in: path
          description: The id of the requested dish
          required: true
          schema:
            $ref: '#/components/schemas/IdType'
      responses:
        '200':
          description: Returns the requested dish.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dish'
        '400':
          description: Invalid or missing `dishID`.

components:
  schemas:
    Location:
      type: object
      description: A location with an address
      required:
        - country
        - city
        - address
        - postalCode
      properties:
        country:
          type: string
          example: NL
        city:
          type: string
          example: Delft
        address:
          type: string
          example: Kanalweg 1
        postalCode:
          type: string
          example: 1234AB
        additionalRemarks:
          type: string
          example: The first business on Stolarska on the left side, going from the small market square.
    IdType:
      type: integer
      format: int64
      example: 2115
    Order:
      type: object
      required:
        - orderID
        - customerID
        - vendorID
        - dishes
        - price
        - location
        - status
      properties:
        orderID:
          $ref: '#/components/schemas/IdType'
        customerID:
          $ref: '#/components/schemas/IdType'
        vendorID:
          $ref: '#/components/schemas/IdType'
        courierID:
          $ref: '#/components/schemas/IdType'
        dishes:
          type: array
          description: List of dishes in the order with their amounts (all from the same restaurant).
          items:
            type: object
            required:
              - dish
              - amount
            properties:
              dish:
                $ref: '#/components/schemas/Dish'
              amount:
                type: integer
                example: 2
        price:
          type: number
          format: float
          description: The total price of all dishes in the order.
        location:
          $ref: '#/components/schemas/Location'
        specialRequirements:
          type: string
          description: Any special requirements for the order. This field is optional.
        status:
          type: string
          description: The status of the order.
          example: preparing
          enum:
            - unpaid
            - pending
            - accepted
            - rejected
            - preparing
            - "given to courier"
            - "in delivery"
            - delivered
        rating:
          type: integer
          description: The rating of the order (1-10), this field will be missing if the order is not rated
          example: 5
        courierRating:
          type: integer
          description: The rating of the order (1-10), this field will be missing if the order is not rated by the courier
          example: 5
    Dish:
      type: object
      required:
        - dishID
        - vendorID
        - name
        - description
        - ingredients
        - price
      properties:
        dishID:
          $ref: '#/components/schemas/IdType'
        vendorID:
          $ref: '#/components/schemas/IdType'
        name:
          type: string
          description: The name of the dish.
          example: Salad
        description:
          type: string
          description: A short description of the dish.
          example: Classic Cesar Salad
        ingredients:
          type: array
          items:
            type: string
            description: List of ingredients for the dish.
            example: [ "lettuce", "cheese" ]
        price:
          type: number
          format: float
          description: The price of the dish.
          example: 5.0
        picture:
          type: string
          format: uri
          description: The URL of the picture of the dish. This field is optional.
        allergens:
          type: array
          items:
            type: string
            description: Information about allergens for the dish ingredients. This field is optional.
    Analytic:
      type: object
      required:
        - orderVolume
        - popularItems
        - peakOrderingTimes
        - customerPreferences
      properties:
        orderVolume:
          type: array
          items:
            type: object
            description: returns average orders per day
            required:
              - day
              - average
            properties:
              day:
                type: string
                example: monday
              average:
                type: number
                example: 7.52

        popularItems:
          type: array
          items:
            $ref: '#/components/schemas/Dish'
        peakOrderingHours:
          type: array
          items:
            type: integer
            description: Ours of the peak ordering times
            example: [ 18, 19 ]
        customerPreferences:
          type: array
          items:
            type: object
            description: returns the favorite dish per customer
            required:
              - customerID
              - favoriteDishID
            properties:
              customerID:
                $ref: '#/components/schemas/IdType'
              favoriteDishID:
                $ref: '#/components/schemas/IdType'
